name: Build, Release, and Update Frontend

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build_executables:
    name: Build for ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            asset-name: GreenScreenCompanion-linux-x64.zip
          - os: windows-latest
            os-name: Windows
            asset-name: GreenScreenCompanion-windows-x64.zip
          - os: macos-14
            os-name: "macOS (Universal)"
            asset-name: GreenScreenCompanion-macos-universal.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r companion-app/requirements.txt
          pip install pyinstaller
      - name: Build with PyInstaller
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            pyinstaller --onefile --name "GreenScreenCompanion" --target-arch universal2 companion-app/server.py
          else
            pyinstaller --onefile --name "GreenScreenCompanion" companion-app/server.py
          fi
      
      - name: Download FFmpeg for Windows
        if: runner.os == 'Windows'
        run: |
          curl -Lo ffmpeg.zip "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          unzip -q ffmpeg.zip
          mv ffmpeg-master-latest-*/bin/ffmpeg.exe .

      - name: Download FFmpeg for Linux
        if: runner.os == 'Linux'
        run: |
          curl -Lo ffmpeg.tar.xz "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz"
          tar -xf ffmpeg.tar.xz
          mv ffmpeg-master-latest-*/bin/ffmpeg .

      - name: Download and Create Universal FFmpeg for macOS
        if: runner.os == 'macOS'
        run: |
          # Download both Intel (x86_64) and Apple Silicon (arm64) builds
          curl -Lo ffmpeg-intel.zip "https://evermeet.cx/ffmpeg/ffmpeg-7.0.zip"
          curl -Lo ffmpeg-arm.zip "https://evermeet.cx/ffmpeg/ffmpeg-arm64-7.0.zip"
          
          # Extract and rename them
          unzip -q ffmpeg-intel.zip && mv ffmpeg ffmpeg-intel
          unzip -q ffmpeg-arm.zip && mv ffmpeg ffmpeg-arm

          # Use the 'lipo' tool to combine them into a single universal binary
          echo "Creating universal FFmpeg binary..."
          lipo -create -output ffmpeg ffmpeg-intel ffmpeg-arm
          
          # Verify the result
          lipo -info ffmpeg

      - name: Assemble files for packaging
        shell: bash
        run: |
          mkdir package
          cp dist/GreenScreenCompanion* package/
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp ffmpeg.exe package/
          else
            cp ffmpeg package/
          fi
          echo "--- Final package contents ---"
          ls -l package
      - name: Create Zip Archive
        shell: bash
        run: |
          cd package
          zip -r ../${{ matrix.asset-name }} .
          
      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os-name }}
          path: ${{ matrix.asset-name }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_executables
    permissions:
      contents: write
    steps:
      - name: Download all packages from build job
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          path: release-assets
          merge-multiple: true
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            Official release of the GreenScreenCompanion app, version ${{ github.ref_name }}.
            FFmpeg is included. The macOS download works on both Intel and Apple Silicon Macs.
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_frontend_version:
    name: Update Frontend Download Links
    runs-on: ubuntu-latest
    needs: create_release
    permissions:
      contents: write
    steps:
      - name: Checkout code on master branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'master'
      - name: Get new version number from tag
        run: echo "NEW_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Update ConnectionStatus.tsx
        run: |
          # Update the version number
          sed -i "s|/releases/download/v[0-9]\+\.[0-9]\+\.[0-9]\+|/releases/download/${{ env.NEW_VERSION }}|g" frontend/src/components/ConnectionStatus/ConnectionStatus.tsx
          # Update the macOS filename to the new universal name
          sed -i "s|GreenScreenCompanion-macos-x64.zip|GreenScreenCompanion-macos-universal.zip|g" frontend/src/components/ConnectionStatus/ConnectionStatus.tsx
      - name: Commit and push the updated file
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add frontend/src/components/ConnectionStatus/ConnectionStatus.tsx
          if ! git diff --staged --quiet; then
            git commit -m "chore: Update companion app version to ${{ env.NEW_VERSION }}"
            git push
          else
            echo "No changes to commit."
          fi