name: Build, Release, and Update Frontend

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  # --- JOB 1: Build executables for all platforms ---
  build_executables:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r companion-app/requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --name "GreenScreenCompanion" companion-app/server.py

      - name: Package artifact
        shell: bash
        run: |
          cd dist
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv GreenScreenCompanion.exe GreenScreenCompanion-windows-x64.exe
            echo "ASSET_NAME=GreenScreenCompanion-windows-x64.exe" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            zip -r GreenScreenCompanion-macos.zip GreenScreenCompanion.app
            echo "ASSET_NAME=GreenScreenCompanion-macos.zip" >> $GITHUB_ENV
          else
            mv GreenScreenCompanion GreenScreenCompanion-linux-x64
            echo "ASSET_NAME=GreenScreenCompanion-linux-x64" >> $GITHUB_ENV
          fi

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/${{ env.ASSET_NAME }}

  # --- JOB 2: Create the GitHub Release and upload built files ---
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_executables

    permissions:
      contents: write

    steps:
      - name: Download all executables from build job
        uses: actions/download-artifact@v4
        with:
          pattern: executable-*
          path: release-assets
          merge-multiple: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: "Official release of the GreenScreenCompanion app, version ${{ github.ref_name }}."
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- JOB 3: Update the frontend code with the new version number ---
  update_frontend_version:
    name: Update Frontend Download Links
    runs-on: ubuntu-latest
    needs: create_release

    steps:
      - name: Checkout code on master branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: 'master'

      - name: Get new version number from tag
        run: echo "NEW_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Update ConnectionStatus.tsx
        run: |
          # Replace YOUR_USERNAME/YOUR_REPO with your actual details
          sed -i 's|https://github.com/YOUR_USERNAME/YOUR_REPO/releases/download/v[0-9.]*|https://github.com/YOUR_USERNAME/YOUR_REPO/releases/download/${{ env.NEW_VERSION }}|g' frontend/src/components/ConnectionStatus/ConnectionStatus.tsx

      - name: Commit and push the updated file
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add frontend/src/components/ConnectionStatus/ConnectionStatus.tsx
          if ! git diff --staged --quiet; then
            git commit -m "chore: Update companion app version to ${{ env.NEW_VERSION }}"
            git push
          else
            echo "No changes to commit."
          fi