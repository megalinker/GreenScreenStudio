name: Build and Release Companion App

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build_executables:
    name: Build for ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os-name: Linux
            ffmpeg-url: "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz"
            ffmpeg-archive: ffmpeg.tar.xz
          - os: windows-latest
            os-name: Windows
            ffmpeg-url: "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
            ffmpeg-archive: ffmpeg.zip
          - os: macos-latest
            os-name: macOS
            ffmpeg-url: "https://evermeet.cx/ffmpeg/ffmpeg-6.1.1.zip"
            ffmpeg-archive: ffmpeg.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r companion-app/requirements.txt
          pip install pyinstaller
      - name: Build with PyInstaller
        run: pyinstaller --onefile --name "GreenScreenCompanion" companion-app/server.py
      - name: Download and Extract FFmpeg
        shell: bash
        run: |
          curl -Lo ${{ matrix.ffmpeg-archive }} "${{ matrix.ffmpeg-url }}"
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            unzip -q ${{ matrix.ffmpeg-archive }}
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            unzip -q ${{ matrix.ffmpeg-archive }}
            mv ffmpeg-master-latest-*/bin/ffmpeg.exe .
          else # Linux
            tar -xf ${{ matrix.ffmpeg-archive }}
            mv ffmpeg-master-latest-*/bin/ffmpeg .
          fi
      - name: Create final package directory
        run: |
          mkdir package
          mv dist/GreenScreenCompanion* package/
          mv ffmpeg* package/
      - name: Package for Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Compress-Archive -Path package/* -DestinationPath GreenScreenCompanion-windows-x64.zip
          echo "ASSET_NAME=GreenScreenCompanion-windows-x64.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Package for Unix (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd package
          zip -r ../GreenScreenCompanion-${{ runner.os == 'macOS' && 'macos' || 'linux' }}-x64.zip .
          echo "ASSET_NAME=GreenScreenCompanion-${{ runner.os == 'macOS' && 'macos' || 'linux' }}-x64.zip" >> $GITHUB_ENV
      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os-name }}
          path: ${{ env.ASSET_NAME }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_executables
    permissions:
      contents: write
    steps:
      - name: Download all packages from build job
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          path: release-assets
          merge-multiple: true
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: "Official release of the GreenScreenCompanion app, version ${{ github.ref_name }}. FFmpeg is included."
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}