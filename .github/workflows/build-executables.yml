name: Build Companion App Executables

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r companion-app/requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: |
        # The --name flag sets the executable name.
        # The output will be in the 'dist' folder.
        pyinstaller --onefile --name "GreenScreenCompanion" companion-app/server.py

    - name: Prepare Artifacts for Upload
      run: |
        cd dist
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv GreenScreenCompanion.exe GreenScreenCompanion-windows.exe
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          # On macOS, PyInstaller creates a .app bundle, but the executable is inside.
          # For a simple server, the raw executable is fine. We zip the .app bundle for distribution.
          mv GreenScreenCompanion GreenScreenCompanion-macos
          zip -r GreenScreenCompanion-macos.zip GreenScreenCompanion.app
        else
          mv GreenScreenCompanion GreenScreenCompanion-linux
        fi
      shell: bash

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: companion-app-${{ matrix.os }}
        path: |
          dist/GreenScreenCompanion-windows.exe
          dist/GreenScreenCompanion-macos.zip
          dist/GreenScreenCompanion-linux
        if-no-files-found: 'error'